#!/bin/bash
# Made by David De Grave, 2017
# david.degrave@mind.be

# Default board to build
BOARD="x86_64"

# Buildroot version, branch and/or tag to use
BUILDROOT_REPO="git://git.buildroot.net/buildroot.git"
BUILDROOT_BRANCH="master"
BUILDROOT_TAG=""
###

# Space separated list of tools required for the build
# (Basically the non common tools used in all the scripts)
HOSTDEPTOOLS=(git awk make)

. scripts/include/log || exit 1

extra=
overrides=
build=normal
make=make

while [ "${1:0:2}" == '--' ]; do
	case $1 in
	 --)		shift; break;;
	 --j)           extra+=" BR2_JLEVEL=$2"; shift;;
	 --board)       BOARD=$2; shift;;
	 --reconfigure)	configure=1;;
	 --reinstall)	reinstall=1;;
	 --low)		make="nice -n 5 -- $make";;
	 --brief)	build=brief;;
	 --init)	init=1;;
	 *)		cat <<-EOT
			Usage: makebr [options] [--] [buildroot command] [buildroot options]"

			Options:
			 --help        This help screen
			 --board       Board to build
			 --init        Just download/update external objects
			 --reconfigure Init and (re)configure buildroot (full rebuild of the project !)
			 --reinstall   Force the reinstall of target without a full rebuild
			 --brief       Create a log file and show lesser outputs
			 --low         Start building with a lower ressources priority
			 --j <n>       Use max <n> cpus

			EOT
			exit;;
	esac
	shift
done

BASE_DIR=$(readlink -f "$0")
BASE_DIR=${BASE_DIR%/*}
CONFIG_DIR="$BASE_DIR/configs"
PROJECT_DIR="$BASE_DIR/project"
PROJECT=$(sed -n 's/^name: \(.*\)/\1/p' < "$PROJECT_DIR/external.desc")
DEFCONFIG="${BOARD}_defconfig"
OUTPUT="$BASE_DIR/o-$BOARD"

for tool in ${HOSTDEPTOOLS[*]}; do
	command -v $tool &>/dev/null || \
	  die "The tool '${C_LCY}${tool}${C_NRM}' is missing and required ! Please install it before continuing ..."
done

log "Board: $C_LCY$BOARD$C_NRM"

init_br() {
	# $1 = directory name, e.g. buildroot
	# $2 = remote repository, e.g. $BUILDROOT_REPO
	# $3 = branch name, e.g. $BUILDROOT_BRANCH
	# $4 = optional tag name to stick to, e.g. $BUILDROOT_TAG

	if [ ! -d "$1" ]; then
		log "Retrieving buildroot from upstream ..."

		if ! git ls-remote --heads "$2" "$3" > /dev/null; then
			echo
			echo "There was a problem retrieving buildroot..."
			echo
			echo "Make sure that:"
			echo "  1. The repository is the right one: $2"
			echo "  2. Your ssh key is registered at the remote."
			echo "  3. You have (read) access to this repository."
			echo "  4. The branch '$3' exists."
			[ $4 ] && \
			echo "  5. The tag '$4' exists."
			exit 1
		fi
		log "Cloning buildroot from $2 ..."
		git clone "$2" "$1" || die "Exit code $?"
	fi
	local checkout=${4:-$3}
	log "Checking out '$checkout'"
	git -C "$1" checkout "$checkout" 2>&1 | grep "^\(HEAD\|Your branch is\)" || dierc $? "Exit code $?"
}

brief() {
	local ret start d h m mf sf line

	start=${SECONDS}

	$make -C buildroot "O=$OUTPUT" $extra "${@}" 2>&1 | {
		while read line; do
			printf "%(%H:%M:%S)T %s\n" -1 "${line}"
		done \
		| tee -a "$OUTPUT/build.log" \
		| grep --line-buffered --colour=never -E '>>>'
	}
	ret=${PIPESTATUS[0]}

	d=$((SECONDS-start))
	printf "Done in "
	h=$((d/3600))
	d=$((d%3600))
	[ $h -ne 0 ] && { printf "%dh " $h; mf="02"; }
	m=$((d/60))
	d=$((d%60))
	[ $m -ne 0 ] && { printf "%${mf}dmin " $m; sf="02"; }
	printf "%${sf}ds\n" $d

	return $ret
}

normal() {
	$make -C buildroot "O=$OUTPUT" $extra "$@"
}

init_br buildroot "$BUILDROOT_REPO" "$BUILDROOT_BRANCH" "$BUILDROOT_TAG"

if [ ! -f "${CONFIG_DIR}/$DEFCONFIG" ]; then
	if [ $init ] && [ -f buildroot/configs/$DEFCONFIG ]; then
		warn "configs/$DEFCONFIG not found ! Copying from buildroot..."
		mkdir -p boards/$BOARD/fs-overlay
		cp -v buildroot/configs/$DEFCONFIG configs/
		cp -v scripts/templates/board-post-build-hook boards/$BOARD/post-build-hook
		cp -v scripts/templates/board-post-image-hook boards/$BOARD/post-image-hook
	else
		die "defconfig '$DEFCONFIG' not found !"
	fi
fi

if [ $init ]; then
	log "init done!"
	exit 0
fi

if   [ $configure ] && [ -e "$OUTPUT" ]; then
	read -p "Sure to reconfigure everything ? (the actual build directory will be removed !) [hit CTRL-C to abord]"
	t="$OUTPUT.$$"
	mv "$OUTPUT" "$t" 2>/dev/null && { rm -rf "$t" & }
elif [ $reinstall ]; then
	find $OUTPUT/build -regex '.*\.stamp_.*\(built\|installed\)' -delete
	rm -rf $OUTPUT/{final,staging} $OUTPUT/{host,images,target}/*
fi

if [ ! -e "$OUTPUT" ]; then
	log "Configuring buildroot ..."

	mkdir -p "$OUTPUT"
	overrides+=" BR2_EXTERNAL=$PROJECT_DIR"
	overrides+=" BR2_DEFCONFIG=$CONFIG_DIR/$DEFCONFIG"
	$build defconfig $overrides || dierc $? "Error code $?"

	# Patching the config
	mv -f "$OUTPUT/.config" "$OUTPUT/.config.old"
	awk < "$OUTPUT/.config.old" > "$OUTPUT/.config" -f <(cat <<-EOT
		BEGIN{
		    FS="="
		    addafter["BR2_ROOTFS_POST_BUILD_SCRIPT"] = "../boards/${BOARD}/post-build-hook ../project/post-build-hook"
		    addafter["BR2_ROOTFS_POST_IMAGE_SCRIPT"] = "../boards/${BOARD}/post-image-hook ../project/post-image-hook"
		    addafter["BR2_ROOTFS_OVERLAY"] = "../boards/${BOARD}/fs-overlay ../project/fs-overlay"
		    replace["BR2_DL_DIR"] = "../dl"
		}{
		    if (\$1 in addafter) {
		        if (index(\$0, addafter[\$1])) {
		            print
		        } else {
		            gsub(/"/,"")
		            printf "%s=\\"%s %s\\"\\n",\$1,\$2,addafter[\$1]
		        }
		        delete addafter[\$1]
		    } else if (\$1 in replace) {
		        printf "%s=\\"%s\\"\\n",\$1,replace[\$1]
		        delete replace[\$1]
		    } else {
		        print
		    }
		}
		END{
		    for(f in addafter){
		        printf "%s=\"%s\"\n",f,addafter[f]
		    }
		    for(f in replace){
		        printf "%s=\"%s\"\n",f,replace[f]
		    }
		}
	EOT
	)
	log "Downloading/checking all the source packages ..."
	$build source || dierc $? "Error code $?"
fi

if [ $configure ]; then
	log "Configure done!"
	exit 0
fi

log "Start building $(date)"
$build "${@}" || dierc $? "Error code $?"
log "Build well done $(date)"
